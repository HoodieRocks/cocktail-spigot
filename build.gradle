plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    id("io.gitlab.arturbosch.detekt").version("1.22.0")
    id "com.diffplug.spotless" version "6.18.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'me.cobble'
version = '1.3'

repositories {
    mavenCentral()
    maven { url = "https://repo.codemc.org/repository/maven-public/" }
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url = 'https://jitpack.io'
    }
    maven {
        name "papermc"
        url "https://papermc.io/repo/repository/maven-public/"
    }
    maven { url = "https://repo.codemc.org/repository/maven-public/" }
}

dependencies {
    implementation "io.papermc:paperlib:1.0.8"
    implementation "dev.jorel:commandapi-bukkit-shade:9.0.3"
    implementation "dev.jorel:commandapi-bukkit-kotlin:9.0.3"
    compileOnly platform("org.http4k:http4k-bom:4.44.0.0")
    compileOnly "org.http4k:http4k-core:4.44.0.0"
    compileOnly "org.http4k:http4k-server-undertow:4.44.0.0"
    compileOnly 'org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT'
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib"
    compileOnly "dev.dejvokep:boosted-yaml:1.3"
    compileOnly "com.comphenix.protocol:ProtocolLib:4.8.0"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

jar.dependsOn(shadowJar)

shadowJar {
    archiveClassifier.set("")
    destinationDirectory = file("D:/Users/aiden/Documents/server3/plugins")
    relocate "io.papermc.lib", "me.cobble.cocktail.libs.paperlib"
    relocate("dev.jorel.commandapi", "me.cobble.cocktail.libs.commandapi")
    minimize()
}

detekt {
    buildUponDefaultConfig = true // preconfigure defaults
    allRules = false // activate all available (even unstable) rules.
    config = files("detekt.yml") // point to your custom config defining rules to run, overwriting default behavior
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(2) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    yaml {
        target '**/*.yaml', '**/*.yml'

        trimTrailingWhitespace()
        indentWithSpaces(2) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    kotlin {
        // version, setUseExperimental, userData and editorConfigOverride are all optional
        ktlint().setEditorConfigPath("$projectDir/.editorconfig")  // sample unusual placement
    }
}
